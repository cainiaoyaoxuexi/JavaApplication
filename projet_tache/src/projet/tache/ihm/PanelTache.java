/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package projet.tache.ihm;


import java.awt.Color;
import java.awt.Component;
import java.awt.event.FocusEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import projet.tache.command.undoredo.*;
import projet.tache.mvc.*;
import projet.tache.métier.*;
/**
 *
 * @author 21103205
 */
public class PanelTache extends javax.swing.JPanel {
    private Model model;
    private Periode p;    
    private List<JLabel> labels;
    private List<JTextField> textFields;
    private List<JComboBox> lstComboBox;
    private ActionsTableModel tableModel; 
    private List<JPanel> lstPanel;
    /**
     * Creates new form PanelTache
     */
    public PanelTache() {
        initComponents();
        
        SwingUtilities.invokeLater(new Runnable(){
            @Override
            public void run(){
                txtPeri.requestFocusInWindow();
            }
        });
        
        model = new Model();
        tableModel = new ActionsTableModel();
        lstPanel=new ArrayList<>();
        labels=new ArrayList();
        textFields=new ArrayList();
        lstComboBox=new ArrayList(); 
        
        
        TableSuivi.setModel(tableModel);
        TableSuivi.setDefaultRenderer(Tache.class, new ActionRenderer());
        PanelTach.setVisible(false);
        setModel(model);
        
        rbtPeriS.doClick();
        rbtPeriS.setSelected(true);      
        iseditable();
        
        lstPanel.add(PanelAtt1);
        lstPanel.add(PanelAtt2);
        lstPanel.add(PanelAtt3);
        
        lstComboBox.add(cbxVal1);
        lstComboBox.add(cbxVal2);
        lstComboBox.add(cbxVal3);
        lstComboBox.add(cbxA3);
        
        labels.add(lblA1);
        labels.add(lblA2);
        
    //ajouter les listeners de texte du nom période
        VeriNomPListener nomplistener= new VeriNomPListener();
        txtPeri.getDocument().addDocumentListener(nomplistener);
        verifierperinom();
    
    //ajouter les listeners de texte du nom tâche
        VeriNomTSListener nomTSlistener= new VeriNomTSListener();
        txtNomT.getDocument().addDocumentListener(nomTSlistener);
        verifiernomTS();
        
        
              
    }

    public Model getModel() {
        return model;
    }

    public void setModel(Model model) {
        this.model = model;
        tableModel.fireTableStructureChanged();
                
        txtPeri.setText("");
        periodeSview rpsv=new periodeSview();
        model.addView(rpsv);
        rpsv.notify(model);
                          
        VerifierPeriNomView vrpv=new VerifierPeriNomView();
        model.addView(vrpv);
        vrpv.notify(model);
        
        VerifierTSNomView vrtsv=new VerifierTSNomView();
        model.addView(vrtsv);
        vrtsv.notify(model);
        
        

        model.addView(new View() {
            @Override
            public void notify(Model model) {
                tableModel.fireTableStructureChanged();
            }
        });     
              
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        PanelEdit = new javax.swing.JPanel();
        PanelPeri = new javax.swing.JPanel();
        PanelCreP = new javax.swing.JPanel();
        BtnCreatP = new javax.swing.JButton();
        txtPeri = new javax.swing.JTextField();
        lblVeriPeriNom = new javax.swing.JLabel();
        lblCreateP = new javax.swing.JLabel();
        rbtPeriS = new javax.swing.JRadioButton();
        rbtPeriC = new javax.swing.JRadioButton();
        PanelList = new javax.swing.JPanel();
        lblPeri = new javax.swing.JLabel();
        cbxPeri = new javax.swing.JComboBox();
        btnEntrer = new javax.swing.JButton();
        PanelTach = new javax.swing.JPanel();
        PanelAjoT = new javax.swing.JPanel();
        lblNomT = new javax.swing.JLabel();
        txtNomT = new javax.swing.JTextField();
        btnAjouter = new javax.swing.JButton();
        lblWarningTS = new javax.swing.JLabel();
        PanelContexte = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cbxAttr = new javax.swing.JComboBox();
        btnAttr = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        PanelAtt1 = new javax.swing.JPanel();
        lblA1 = new javax.swing.JLabel();
        cbxVal1 = new javax.swing.JComboBox();
        PanelAtt2 = new javax.swing.JPanel();
        lblA2 = new javax.swing.JLabel();
        cbxVal2 = new javax.swing.JComboBox();
        PanelAtt3 = new javax.swing.JPanel();
        cbxA3 = new javax.swing.JComboBox();
        cbxVal3 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        PanelTs = new javax.swing.JPanel();
        ScrollPaneLstT = new javax.swing.JScrollPane();
        lstTache = new javax.swing.JList();
        PanelTds = new javax.swing.JPanel();
        Paneltds = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableSuivi = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(1024, 768));

        PanelEdit.setPreferredSize(new java.awt.Dimension(410, 800));

        PanelPeri.setBorder(javax.swing.BorderFactory.createTitledBorder("Période"));

        BtnCreatP.setText("Créer");
        BtnCreatP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCreatPActionPerformed(evt);
            }
        });

        lblVeriPeriNom.setBackground(new java.awt.Color(255, 255, 102));
        lblVeriPeriNom.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        lblVeriPeriNom.setForeground(new java.awt.Color(0, 102, 255));
        lblVeriPeriNom.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblCreateP.setText("Créer Période :");

        buttonGroup1.add(rbtPeriS);
        rbtPeriS.setText("Période Simple");
        rbtPeriS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtPeriSActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbtPeriC);
        rbtPeriC.setText("Période Contexte");
        rbtPeriC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtPeriCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelCrePLayout = new javax.swing.GroupLayout(PanelCreP);
        PanelCreP.setLayout(PanelCrePLayout);
        PanelCrePLayout.setHorizontalGroup(
            PanelCrePLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelCrePLayout.createSequentialGroup()
                .addGroup(PanelCrePLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbtPeriS)
                    .addComponent(lblCreateP, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelCrePLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelCrePLayout.createSequentialGroup()
                        .addComponent(rbtPeriC)
                        .addContainerGap())
                    .addGroup(PanelCrePLayout.createSequentialGroup()
                        .addComponent(txtPeri)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BtnCreatP, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addComponent(lblVeriPeriNom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        PanelCrePLayout.setVerticalGroup(
            PanelCrePLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelCrePLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(PanelCrePLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbtPeriS)
                    .addGroup(PanelCrePLayout.createSequentialGroup()
                        .addComponent(rbtPeriC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                        .addGroup(PanelCrePLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BtnCreatP, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(PanelCrePLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtPeri, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblCreateP, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblVeriPeriNom, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        lblVeriPeriNom.getAccessibleContext().setAccessibleName("t");

        lblPeri.setText("List de période : ");

        cbxPeri.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cbxPeriMouseClicked(evt);
            }
        });
        cbxPeri.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxPeriItemStateChanged(evt);
            }
        });
        cbxPeri.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxPeriActionPerformed(evt);
            }
        });

        btnEntrer.setText("Editer");
        btnEntrer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEntrerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelListLayout = new javax.swing.GroupLayout(PanelList);
        PanelList.setLayout(PanelListLayout);
        PanelListLayout.setHorizontalGroup(
            PanelListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelListLayout.createSequentialGroup()
                .addComponent(lblPeri, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbxPeri, 0, 162, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEntrer, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        PanelListLayout.setVerticalGroup(
            PanelListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblPeri, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cbxPeri)
            .addComponent(btnEntrer, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout PanelPeriLayout = new javax.swing.GroupLayout(PanelPeri);
        PanelPeri.setLayout(PanelPeriLayout);
        PanelPeriLayout.setHorizontalGroup(
            PanelPeriLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PanelCreP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(PanelList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        PanelPeriLayout.setVerticalGroup(
            PanelPeriLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPeriLayout.createSequentialGroup()
                .addComponent(PanelCreP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PanelList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        PanelTach.setBorder(javax.swing.BorderFactory.createTitledBorder("Tâche"));

        lblNomT.setText("Nom Tâche :");

        txtNomT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomTActionPerformed(evt);
            }
        });

        btnAjouter.setText("Ajouter");
        btnAjouter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAjouterActionPerformed(evt);
            }
        });

        lblWarningTS.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        lblWarningTS.setForeground(new java.awt.Color(0, 102, 255));
        lblWarningTS.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout PanelAjoTLayout = new javax.swing.GroupLayout(PanelAjoT);
        PanelAjoT.setLayout(PanelAjoTLayout);
        PanelAjoTLayout.setHorizontalGroup(
            PanelAjoTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelAjoTLayout.createSequentialGroup()
                .addComponent(lblNomT, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNomT)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAjouter, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(lblWarningTS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        PanelAjoTLayout.setVerticalGroup(
            PanelAjoTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelAjoTLayout.createSequentialGroup()
                .addGroup(PanelAjoTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNomT, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelAjoTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtNomT, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAjouter, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblWarningTS, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        PanelContexte.setBorder(javax.swing.BorderFactory.createTitledBorder("Contexte"));

        jLabel1.setText("Attributs :");

        cbxAttr.setEditable(true);
        cbxAttr.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Responsable", "Durée", "Autre" }));
        cbxAttr.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxAttrItemStateChanged(evt);
            }
        });
        cbxAttr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxAttrActionPerformed(evt);
            }
        });

        btnAttr.setText("Ajouter");
        btnAttr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAttrActionPerformed(evt);
            }
        });

        jLabel2.setText("Ajouter 3 attributs maximum");

        jPanel1.setLayout(new java.awt.GridLayout(3, 0));

        lblA1.setText("Responsable");

        cbxVal1.setEditable(true);

        javax.swing.GroupLayout PanelAtt1Layout = new javax.swing.GroupLayout(PanelAtt1);
        PanelAtt1.setLayout(PanelAtt1Layout);
        PanelAtt1Layout.setHorizontalGroup(
            PanelAtt1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelAtt1Layout.createSequentialGroup()
                .addComponent(lblA1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbxVal1, 0, 259, Short.MAX_VALUE))
        );
        PanelAtt1Layout.setVerticalGroup(
            PanelAtt1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelAtt1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblA1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cbxVal1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1.add(PanelAtt1);

        lblA2.setText("Durée");

        cbxVal2.setEditable(true);

        javax.swing.GroupLayout PanelAtt2Layout = new javax.swing.GroupLayout(PanelAtt2);
        PanelAtt2.setLayout(PanelAtt2Layout);
        PanelAtt2Layout.setHorizontalGroup(
            PanelAtt2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelAtt2Layout.createSequentialGroup()
                .addComponent(lblA2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbxVal2, 0, 259, Short.MAX_VALUE))
        );
        PanelAtt2Layout.setVerticalGroup(
            PanelAtt2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelAtt2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblA2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cbxVal2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1.add(PanelAtt2);

        cbxA3.setEditable(true);

        cbxVal3.setEditable(true);

        javax.swing.GroupLayout PanelAtt3Layout = new javax.swing.GroupLayout(PanelAtt3);
        PanelAtt3.setLayout(PanelAtt3Layout);
        PanelAtt3Layout.setHorizontalGroup(
            PanelAtt3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelAtt3Layout.createSequentialGroup()
                .addComponent(cbxA3, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxVal3, 0, 252, Short.MAX_VALUE))
        );
        PanelAtt3Layout.setVerticalGroup(
            PanelAtt3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelAtt3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(cbxA3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(cbxVal3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1.add(PanelAtt3);

        jButton1.setText("Confirmer");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Annuler");
        jButton2.setPreferredSize(new java.awt.Dimension(79, 23));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelContexteLayout = new javax.swing.GroupLayout(PanelContexte);
        PanelContexte.setLayout(PanelContexteLayout);
        PanelContexteLayout.setHorizontalGroup(
            PanelContexteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(PanelContexteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelContexteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelContexteLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PanelContexteLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(PanelContexteLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxAttr, 0, 140, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAttr, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6))))
        );
        PanelContexteLayout.setVerticalGroup(
            PanelContexteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelContexteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelContexteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxAttr, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAttr, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelContexteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout PanelTachLayout = new javax.swing.GroupLayout(PanelTach);
        PanelTach.setLayout(PanelTachLayout);
        PanelTachLayout.setHorizontalGroup(
            PanelTachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PanelAjoT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(PanelContexte, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        PanelTachLayout.setVerticalGroup(
            PanelTachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelTachLayout.createSequentialGroup()
                .addComponent(PanelAjoT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PanelContexte, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        PanelTs.setBorder(javax.swing.BorderFactory.createTitledBorder("List des tâches"));

        lstTache.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lstTacheMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstTacheMouseClicked(evt);
            }
        });
        lstTache.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstTacheValueChanged(evt);
            }
        });
        ScrollPaneLstT.setViewportView(lstTache);

        javax.swing.GroupLayout PanelTsLayout = new javax.swing.GroupLayout(PanelTs);
        PanelTs.setLayout(PanelTsLayout);
        PanelTsLayout.setHorizontalGroup(
            PanelTsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ScrollPaneLstT, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)
        );
        PanelTsLayout.setVerticalGroup(
            PanelTsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ScrollPaneLstT, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout PanelEditLayout = new javax.swing.GroupLayout(PanelEdit);
        PanelEdit.setLayout(PanelEditLayout);
        PanelEditLayout.setHorizontalGroup(
            PanelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelEditLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PanelTs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PanelPeri, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PanelTach, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        PanelEditLayout.setVerticalGroup(
            PanelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelEditLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PanelPeri, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(PanelTach, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(PanelTs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        PanelTds.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        PanelTds.setPreferredSize(new java.awt.Dimension(300, 416));

        Paneltds.setBorder(javax.swing.BorderFactory.createTitledBorder("Tableau de suivi"));

        TableSuivi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TableSuivi);

        javax.swing.GroupLayout PaneltdsLayout = new javax.swing.GroupLayout(Paneltds);
        Paneltds.setLayout(PaneltdsLayout);
        PaneltdsLayout.setHorizontalGroup(
            PaneltdsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 598, Short.MAX_VALUE)
        );
        PaneltdsLayout.setVerticalGroup(
            PaneltdsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        javax.swing.GroupLayout PanelTdsLayout = new javax.swing.GroupLayout(PanelTds);
        PanelTds.setLayout(PanelTdsLayout);
        PanelTdsLayout.setHorizontalGroup(
            PanelTdsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Paneltds, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        PanelTdsLayout.setVerticalGroup(
            PanelTdsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Paneltds, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(PanelEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(PanelTds, javax.swing.GroupLayout.DEFAULT_SIZE, 614, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PanelEdit, javax.swing.GroupLayout.DEFAULT_SIZE, 768, Short.MAX_VALUE)
            .addComponent(PanelTds, javax.swing.GroupLayout.DEFAULT_SIZE, 768, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    public final ArrayList<Command> commands = new ArrayList<>();
    
    private void btnAjouterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAjouterActionPerformed
        if(rbtPeriS.isSelected()){
            CommandTacheS cas = new CommandTacheS(model, p.getPeriode(),txtNomT.getText());
            cas.execute();
            commands.add(cas);
        }else if(rbtPeriC.isSelected()){
            CommandTacheC cas = new CommandTacheC(model, p.getPeriode(),txtNomT.getText());
            cas.execute();
            commands.add(cas);            
       }     
            SwingUtilities.invokeLater(new Runnable(){
            @Override
            public void run(){
                txtNomT.requestFocusInWindow();
            }
        });
            txtNomT.setText("");
            verifiernomTS();
            tacheView tsv=new tacheView();
            model.addView(tsv);
            tsv.notify(model);  
            
    }//GEN-LAST:event_btnAjouterActionPerformed
    
    private class tacheView implements View{
         @Override
        public void notify(Model model) {
            Object[] tabTS = model.getTache(p.getPeriode()).toArray();            
            lstTache.setListData(tabTS);            
        }
    }
    
    private void BtnCreatPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCreatPActionPerformed
        SwingUtilities.invokeLater(new Runnable(){
            @Override
            public void run(){
                txtPeri.requestFocusInWindow();
            }
        });
        if(rbtPeriS.isSelected()){
            CommandPeriodeS cas = new CommandPeriodeS(model, txtPeri.getText());
            cas.execute();
            commands.add(cas);
        }else if(rbtPeriC.isSelected()){
            CommandPeriodeC cas = new CommandPeriodeC(model, txtPeri.getText());
            cas.execute();
            commands.add(cas);            
        }
        inicbx();
    }//GEN-LAST:event_BtnCreatPActionPerformed

    public void inicbx(){
        if(btnEntrer.getText()=="Editer"){
            if(rbtPeriS.isSelected()){
                cbxPeri.removeAllItems();
                for(Periode p:model.getLstPeriodSimple()){
                cbxPeri.addItem(p.getPeriode());
                }         
                if(cbxPeri.getItemCount()>0){           
                        cbxPeri.setSelectedIndex(cbxPeri.getItemCount()-1);                      
                }               
            }else{
                if(rbtPeriC.isSelected()){
                    cbxPeri.removeAllItems();
                    for(Periode p:model.getLstPeriodContexte()){
                        cbxPeri.addItem(p.getPeriode());
                    }         
                if(cbxPeri.getItemCount()>0){           
                        cbxPeri.setSelectedIndex(cbxPeri.getItemCount()-1);                      
                }
                }
            }
        } 
        iseditable();
        txtPeri.setText("");
    }
    
    private void cbxPeriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxPeriActionPerformed
 
    }//GEN-LAST:event_cbxPeriActionPerformed

    private void btnEntrerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEntrerActionPerformed
        
        if(btnEntrer.getText()=="Editer"&cbxPeri.getItemCount()>0){
            EditPeri();            
        }
        else {
            ExitPeri();
        } 
    }//GEN-LAST:event_btnEntrerActionPerformed
    
    private void EditPeri(){
        PanelCreP.setVisible(false);
        btnEntrer.setText("Exit");
        PanelTach.setVisible(true); 
        PanelContexte.setVisible(false);
        p=model.getPeri(cbxPeri.getSelectedItem().toString());    
        cbxPeri.setEnabled(false);
        rbtPeriC.setVisible(false);
        rbtPeriS.setVisible(false);
        SwingUtilities.invokeLater(new Runnable(){
            @Override
            public void run(){
                txtNomT.requestFocusInWindow();
            }
        });
    }
    private void ExitPeri(){
        PanelCreP.setVisible(true);
        btnEntrer.setText("Editer");          
        PanelTach.setVisible(false);
        cbxPeri.setEnabled(true);
        rbtPeriC.setVisible(true);
        rbtPeriS.setVisible(true);
        txtNomT.setText("");
    }  

//quand on click le radio boutton periode simple, initialiser la table, la combox des périodes simple et le list des tâches  
    private void rbtPeriSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtPeriSActionPerformed
       SwingUtilities.invokeLater(new Runnable(){
            @Override
            public void run(){
                txtPeri.requestFocusInWindow();
            }
        });
        periodeSview ps=new periodeSview();
        model.addView(ps);
        ps.notify(model);        
        tableModel = new ActionsTableModel();
        TableSuivi.setModel(tableModel);
    }//GEN-LAST:event_rbtPeriSActionPerformed

//la view pour initialiser la combox des périodes simple
    private class periodeSview implements View{
        @Override
        public void notify(Model model) {
           inicbx();
        }
    }
    
//la view pour initialiser la combox des périodes simple
    private class periodeCview implements View{
        @Override
        public void notify(Model model) {
           inicbx();           
        }
    }
    
//quand on click le radio boutton periode contexte, initialiser la table, la combox des périodes contexte et le list des tâches 
    private void rbtPeriCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtPeriCActionPerformed
        SwingUtilities.invokeLater(new Runnable(){
            @Override
            public void run(){
                txtPeri.requestFocusInWindow();
            }
        });
        periodeCview pc=new periodeCview();
        model.addView(pc);
        pc.notify(model);

        tableModel = new ActionsTableModel();
        TableSuivi.setModel(tableModel);
        //setModel(model);
        
    }//GEN-LAST:event_rbtPeriCActionPerformed

//listener du combox de périodes, quand le combox changed, le list des tâche et la table de suivi changed selon le période choisi!
    private void cbxPeriItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxPeriItemStateChanged
        if(cbxPeri.getItemCount()>0){
        //PanelTs.setVisible(true);    
        Object[] lstT=model.getTache(cbxPeri.getSelectedItem().toString()).toArray();
        lstTache.setListData(lstT);         
        tableModel = new ActionsTableModel();
        TableSuivi.setModel(tableModel);
        }else{
            //PanelTs.setVisible(false);
        ArrayList<String> l=new ArrayList();
        String s="";
        l.add(s);
        Object[] lstT=l.toArray();
        lstTache.setListData(lstT);         
        tableModel = new ActionsTableModel();
        TableSuivi.setModel(tableModel);
        }
               SwingUtilities.invokeLater(new Runnable(){
            @Override
            public void run(){
                btnEntrer.requestFocusInWindow();
            }
        });
    }//GEN-LAST:event_cbxPeriItemStateChanged

    private void cbxAttrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxAttrActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxAttrActionPerformed

    private void lstTacheValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstTacheValueChanged
       
    }//GEN-LAST:event_lstTacheValueChanged

//quand on click une tâche dans le list des tâches contextes, si la tâche est déjà encriché un contexte, affiche le list des attibuts, sinon on crée la contexte
    private void lstTacheMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstTacheMouseClicked
        if(rbtPeriC.isSelected()){
            try{
            btnAttr.setText("Ajouter");
            PanelContexte.setVisible(true);
            Tache tc=model.getTacheSim(lstTache.getSelectedValue().toString(), cbxPeri.getSelectedItem().toString());

            Contexte cont=((TacheContexte)model.getTacheSim(lstTache.getSelectedValue().toString(), cbxPeri.getSelectedItem().toString())).getCont();
            if(cont==null){
            iniPanelAttri();        //si le context n'exist pas, initialise le panel attributs pour créer le contexte
            }else{           
               txtNomT.setText(lstTache.getSelectedValue().toString());
               btnAttr.setEnabled(false);
               cbxAttr.setEnabled(false);
               txtNomT.setEnabled(false);
               btnAjouter.setEnabled(false);
               btnEntrer.setEnabled(false);
                for(int i=0;i<cont.getLstAttr().size();i++){                  //si le context déjà existe, affiche les attributs du contexte
                    if(cont.getLstAttr().get(i).toString()=="Responsable"){
                        PanelAtt1.setVisible(true);
                        ArrayList<Valeur> lstValeur=model.getLstValeur("Responsable");
                        cbxVal1.removeAllItems();
                        for(Valeur v:lstValeur){
                            cbxVal1.addItem(v.toString());
                        }
                    }else if(cont.getLstAttr().get(i).toString()=="Durée"){
                        PanelAtt2.setVisible(true);
                        ArrayList<Valeur> lstValeur=model.getLstValeur("Durée");
                        cbxVal2.removeAllItems();
                        for(Valeur v:lstValeur){
                            cbxVal2.addItem(v.toString());
                        }
                    }else{
                        PanelAtt3.setVisible(true);
                        cbxA3.setSelectedItem(cont.getLstAttr().get(i).toString());
                        ArrayList<Valeur> lstValeur=model.getLstValeur(cbxA3.getSelectedItem().toString());
                        cbxVal3.removeAllItems();
                        for(Valeur v:lstValeur){
                            cbxVal3.addItem(v.toString());
                        }
                    }
                }
            }
            }catch(Exception e){
                
            }
        }
    }//GEN-LAST:event_lstTacheMouseClicked
    private void iniPanelAttri(){
        try{
            List selected = lstTache.getSelectedValuesList();
            String TacheSelected = selected.get(0).toString();       
            if(rbtPeriC.isSelected()){
            txtNomT.setText(TacheSelected);
            txtNomT.setEnabled(false); 
            btnEntrer.setEnabled(false);
            lblWarningTS.setVisible(false);
            PanelAtt1.setVisible(false);
            PanelAtt2.setVisible(false);
            PanelAtt3.setVisible(false);
            btnAttr.setEnabled(true);
            cbxAttr.setEnabled(true);
            }
            
        }catch(Exception e){
            
        }
    }
    
//créer les bons valeurs pour les attribits dans le context d'une tâche choisi
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       
        if(rbtPeriC.isSelected()){
            boolean ischoisi=false;
            boolean isnotVide=true;
            boolean isOK=false;
           if(lstPanel.get(0).isVisible()||lstPanel.get(1).isVisible()||lstPanel.get(2).isVisible()){
               ischoisi=true;
           }
            ArrayList<String> lstAttri=new ArrayList();
            ArrayList<String> lstValeur=new ArrayList();
            try{
                for(int i=0;i<3;i++){ 
                    if(lstPanel.get(i).isVisible()){
                        if(i<2){
                            lstAttri.add(labels.get(i).getText());
                            lstValeur.add(lstComboBox.get(i).getSelectedItem().toString());
                        }else{
                            lstAttri.add(lstComboBox.get(i+1).getSelectedItem().toString());
                            lstValeur.add(lstComboBox.get(i).getSelectedItem().toString());
                        }
                    }
                }
                isOK=model.isMapAttValide(cbxPeri.getSelectedItem().toString(),lstTache.getSelectedValue().toString(), lstAttri, lstValeur);
            }catch(Exception e){
                
            }
            
            if(lstValeur.isEmpty()){
                isnotVide=false;
            }
            if(isOK&&ischoisi&&isnotVide){
                CommandEnricherTC cas = new CommandEnricherTC(model, cbxPeri.getSelectedItem().toString(), lstTache.getSelectedValue().toString(), lstAttri, lstValeur);
                cas.execute();
                commands.add(cas);
                txtNomT.setText("");
                txtNomT.setEnabled(true);  
                lblWarningTS.setVisible(true);
                btnEntrer.setEnabled(true);
                btnAjouter.setEnabled(true);
                PanelContexte.setVisible(false);
            }else{
                String st="Choisissez les bons valeurs!";
                JOptionPane.showMessageDialog(null,st);
            }
             
        }
       verifiernomTS();
       
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnAttrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAttrActionPerformed
       
        if(btnAttr.getText().toString()=="Ajouter"){
            if(cbxAttr.getSelectedItem().toString()=="Responsable"){
                PanelAtt1.setVisible(true);       
            }
            if(cbxAttr.getSelectedItem().toString()=="Durée"){
                PanelAtt2.setVisible(true);                               
            }
            if(cbxAttr.getSelectedItem().toString()=="Autre"){
                PanelAtt3.setVisible(true);               
            }
             btnAttr.setText("Supprimer");
        }else{
            if(cbxAttr.getSelectedItem().toString()=="Responsable"){
                PanelAtt1.setVisible(false);                                
            }
            if(cbxAttr.getSelectedItem().toString()=="Durée"){
                PanelAtt2.setVisible(false);                               
            }
            if(cbxAttr.getSelectedItem().toString()=="Autre"){
                PanelAtt3.setVisible(false);                
            }
             btnAttr.setText("Ajouter");
        }
    }//GEN-LAST:event_btnAttrActionPerformed

    private void cbxAttrItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxAttrItemStateChanged
                
        if((cbxAttr.getSelectedItem().toString()=="Responsable"&&PanelAtt1.isVisible())||(cbxAttr.getSelectedItem().toString()=="Durée"&&PanelAtt2.isVisible())||(cbxAttr.getSelectedItem().toString()=="Durée"&&PanelAtt3.isVisible())){
            btnAttr.setText("Supprimer");
        }else{
            btnAttr.setText("Ajouter");
        }
               
    }//GEN-LAST:event_cbxAttrItemStateChanged

    private void lstTacheMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstTacheMouseReleased
        
    }//GEN-LAST:event_lstTacheMouseReleased

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        PanelContexte.setVisible(false);
        txtNomT.setEnabled(true); 
        txtNomT.setText("");
        btnAjouter.setEnabled(true);
        btnEntrer.setEnabled(true);
        verifiernomTS();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txtNomTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomTActionPerformed

    private void cbxPeriMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbxPeriMouseClicked
 
    }//GEN-LAST:event_cbxPeriMouseClicked
     private class VerifierPeriNomView implements View{
        @Override
        public void notify(Model model){
            verifierperinom();
        }
    }
    private class VerifierTSNomView implements View{
        @Override
        public void notify(Model model){
            verifiernomTS();
        }
    }
    private void iseditable(){
        if(cbxPeri.getItemCount()!=0){
            btnEntrer.setEnabled(true);
        }else{
             btnEntrer.setEnabled(false);
        }
    }
    private void verifierperinom(){
        boolean isnombon=model.isNomPValide(txtPeri.getText());   
        BtnCreatP.setEnabled(isnombon);
        lblVeriPeriNom.setVisible(!isnombon);
        
        String message=model.messagePeri(txtPeri.getText());
        lblVeriPeriNom.setText(message);
        
        if(txtPeri.getText().trim().isEmpty()){
            lblVeriPeriNom.setForeground(Color.blue);
        }else{
            lblVeriPeriNom.setForeground(Color.red);
        }
    }
    private void verifiernomTS(){
        if(cbxPeri.getItemCount()>0){
        boolean isTSnombon=model.isNomTSValide(cbxPeri.getSelectedItem().toString(),txtNomT.getText());   
        btnAjouter.setEnabled(isTSnombon);
        lblWarningTS.setVisible(!isTSnombon);
        
        String message=model.messageTache(cbxPeri.getSelectedItem().toString(),txtNomT.getText());
        lblWarningTS.setText(message);
        
        if(txtNomT.getText().trim().isEmpty()){
            lblWarningTS.setForeground(Color.blue);
        }else{
            lblWarningTS.setForeground(Color.red);
        }
        }
    }
    
//la listener du text du nom période
    private class VeriNomPListener implements DocumentListener{

        @Override
        public void insertUpdate(DocumentEvent e) {
            verifierperinom();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            verifierperinom();        
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            verifierperinom();
        }
        
    }
    
//la listener du text du nom tâche
    private class VeriNomTSListener implements DocumentListener{

        @Override
        public void insertUpdate(DocumentEvent e) {
            verifiernomTS();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            verifiernomTS();        
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            verifiernomTS();
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnCreatP;
    private javax.swing.JPanel PanelAjoT;
    private javax.swing.JPanel PanelAtt1;
    private javax.swing.JPanel PanelAtt2;
    private javax.swing.JPanel PanelAtt3;
    private javax.swing.JPanel PanelContexte;
    private javax.swing.JPanel PanelCreP;
    private javax.swing.JPanel PanelEdit;
    private javax.swing.JPanel PanelList;
    private javax.swing.JPanel PanelPeri;
    private javax.swing.JPanel PanelTach;
    private javax.swing.JPanel PanelTds;
    private javax.swing.JPanel PanelTs;
    private javax.swing.JPanel Paneltds;
    private javax.swing.JScrollPane ScrollPaneLstT;
    private javax.swing.JTable TableSuivi;
    private javax.swing.JButton btnAjouter;
    private javax.swing.JButton btnAttr;
    private javax.swing.JButton btnEntrer;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cbxA3;
    private javax.swing.JComboBox cbxAttr;
    private javax.swing.JComboBox cbxPeri;
    private javax.swing.JComboBox cbxVal1;
    private javax.swing.JComboBox cbxVal2;
    private javax.swing.JComboBox cbxVal3;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblA1;
    private javax.swing.JLabel lblA2;
    private javax.swing.JLabel lblCreateP;
    private javax.swing.JLabel lblNomT;
    private javax.swing.JLabel lblPeri;
    private javax.swing.JLabel lblVeriPeriNom;
    private javax.swing.JLabel lblWarningTS;
    private javax.swing.JList lstTache;
    private javax.swing.JRadioButton rbtPeriC;
    private javax.swing.JRadioButton rbtPeriS;
    private javax.swing.JTextField txtNomT;
    private javax.swing.JTextField txtPeri;
    // End of variables declaration//GEN-END:variables

//le model de table de suivi
    private class ActionsTableModel extends AbstractTableModel{

        @Override
        public int getRowCount() {
            int number=0;
            if(cbxPeri.getItemCount()>0){
                if(rbtPeriS.isSelected()){
                    number=model.getTache(cbxPeri.getSelectedItem().toString()).size()*(model.getTache(cbxPeri.getSelectedItem().toString()).size()-1);
                }else{
                    number=model.getTran(cbxPeri.getSelectedItem().toString()).size();
                }
            }
            return number;
        }

        @Override
        public int getColumnCount() {
            return rbtPeriS.isSelected() ? 3:4;
        }   
        
        @Override
        public String getColumnName(int column) {
            String nomcol=null;
            if (column == 0) {
                nomcol="Tâche";
            }
            if (column == 1) {
                nomcol= "Tâche Suivante";
            }
            if (column == 2) {
                nomcol= "Frequence";
            }
            if (column == 3) {
                nomcol= "Contexte";
            }
            return nomcol;            
        }
         @Override
        public Class<?> getColumnClass(int columnIndex) {
            if (columnIndex == 0||columnIndex==1) {
                return Tache.class;
            } else if (columnIndex == 2) {
                return Integer.class;
            } else {
                return String.class;
            }
        }
         @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
           if(cbxPeri.getItemCount()>0){
                if(rbtPeriS.isSelected()){
                    ArrayList<Transition> lstTran=model.getTran(cbxPeri.getSelectedItem().toString());
                    ArrayList<Integer> lstFre=model.getFre(cbxPeri.getSelectedItem().toString());
                    if(columnIndex==0){                        
                        return lstTran.get(rowIndex).getTache();                        
                    }else if(columnIndex==1){
                        return lstTran.get(rowIndex).getTacheSuivante();
                    }else{
                        return lstFre.get(rowIndex);
                    }
                }else{
                    ArrayList<TransitionContexte> lstTranCont=model.getTranCont(cbxPeri.getSelectedItem().toString());
                    ArrayList<Integer> lstFre=model.getFre(cbxPeri.getSelectedItem().toString());
                    if(columnIndex==0){                        
                        return lstTranCont.get(rowIndex).getTache();                        
                    }else if(columnIndex==1){
                        return lstTranCont.get(rowIndex).getTacheSuivante();
                    }else if(columnIndex==2){
                        return lstFre.get(rowIndex);
                    }else{
                        if(!lstTranCont.get(rowIndex).getMapAttr().isEmpty()){
                            return lstTranCont.get(rowIndex).getMapAttr().toString();
                        }else{
                            return "";
                        }
                    }
                }
           }else{
               return "what?";
           }
        }
        
         @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
              if(cbxPeri.getItemCount()>0){
                    if(rbtPeriS.isSelected()){
                        Transition trs=model.getTran(cbxPeri.getSelectedItem().toString()).get(rowIndex);
                        model.ModifFre(cbxPeri.getSelectedItem().toString(), trs, (Integer)aValue);                        
                        fireTableDataChanged();      
                        
                    }else{
                        TransitionContexte trsc=model.getTranCont(cbxPeri.getSelectedItem().toString()).get(rowIndex);
                        model.ModifFre(cbxPeri.getSelectedItem().toString(), trsc, (Integer)aValue);                        
                        fireTableDataChanged();      
                    }
              }
        }
        
        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
           if(btnEntrer.getText()=="Exit"){
                return (columnIndex ==2)&&(rowIndex>=00&&rowIndex<this.getRowCount());
            }else{
               return false;
           }
        }       
    }
    private class ActionRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            DefaultTableCellRenderer defaultCR = (DefaultTableCellRenderer) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            defaultCR.setOpaque(true);
            defaultCR.setBackground(value instanceof Tache ?Color.gray:Color.white);
            return defaultCR;
        }
    }

}
